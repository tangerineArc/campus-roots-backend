generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["typedSql"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ALUMNUS
  STUDENT
}

enum ConnectionStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum MessageStatus {
  READ
  UNREAD
}

enum MediaType {
  IMAGE
  VIDEO
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  createdAt DateTime @default(now())
  about     String?
  avatar    String?
  role      Role

  experiences   Experience[]
  education     Education[]
  skills        Skill[]
  achievements  Achievement[]
  posts         Post[]
  comments      Comment[]
  likedPosts    PostLike[]
  likedComments CommentLike[]
  sockets       UserSocket[]

  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")

  connections1 Connection[] @relation("User1")
  connections2 Connection[] @relation("User2")
}

model Experience {
  id           String  @id @default(cuid())
  organization String
  title        String
  startMonth   String
  startYear    String
  endMonth     String?
  endYear      String?

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Education {
  id         String  @id @default(cuid())
  school     String
  degree     String
  startMonth String
  startYear  String
  endMonth   String?
  endYear    String?

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Skill {
  id    String @id @default(cuid())
  label String

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Achievement {
  id          String  @id @default(cuid())
  title       String
  month       String
  year        String
  description String?

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Post {
  id        String   @id @default(cuid())
  body      String
  createdAt DateTime @default(now())

  media    Media[]
  likes    PostLike[]
  comments Comment[]

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Media {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  storagePath String
  mimetype    String
  mediaType   MediaType

  post   Post   @relation(fields: [postId], references: [id])
  postId String
}

model PostLike {
  id String @id @default(cuid())

  post   Post   @relation(fields: [postId], references: [id])
  postId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@unique([userId, postId])
}

model Comment {
  id        String   @id @default(cuid())
  body      String
  createdAt DateTime @default(now())

  likes CommentLike[]

  parentCommentId String?
  parent          Comment?  @relation("ParentChildren", fields: [parentCommentId], references: [id])
  children        Comment[] @relation("ParentChildren")

  post   Post   @relation(fields: [postId], references: [id])
  postId String

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model CommentLike {
  id String @id @default(cuid())

  comment   Comment @relation(fields: [commentId], references: [id])
  commentId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@unique([userId, commentId])
}

model Message {
  id     String        @id @default(cuid())
  time   DateTime      @default(now())
  text   String
  status MessageStatus

  sender   User   @relation("SentMessages", fields: [senderId], references: [id])
  senderId String

  receiver   User   @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId String
}

model Connection {
  id        String           @id @default(cuid())
  status    ConnectionStatus @default(PENDING)
  createdAt DateTime         @default(now())

  user1   User   @relation("User1", fields: [user1Id], references: [id])
  user1Id String

  user2   User   @relation("User2", fields: [user2Id], references: [id])
  user2Id String

  @@unique([user1Id, user2Id])
}

model UserSocket {
  id        String   @id @default(cuid())
  socketId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@index([userId])
}
